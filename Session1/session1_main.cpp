// Leetcode Session 1 Problems main function
#include <iostream>
#include "session1_test.h"
using namespace std;

int main() {
    cout << "Leetcode Session 1 Problem Solution Application starts.\n";
    Session1Test * testObj = new Session1Test();
    cout << "\nTest for problems starts.\n";

    testObj->isSymmetric101Test();
    testObj->levelOrder102Test();
    testObj->zigzagLevelOrder103Test();
    testObj->maxDepth104Test();
    testObj->buildTree105Test();
    testObj->buildTree106Test();
    testObj->levelOrderBottom107Test();
    testObj->sortedArrayToBST108Test();
    testObj->sortedListToBST109Test();
    testObj->isBalanced110Test();
    testObj->minDepth111Test();
    testObj->hasPathSum112Test();
    testObj->pathSum113Test();
    testObj->flatten114Test();
    testObj->numDistinct115Test();
    testObj->connect116Test();
    testObj->generate118Test();
    testObj->getRow119Test();
    testObj->minimumTotal120Test();
    testObj->maxProfit121Test();
    testObj->maxProfit122Test();
    testObj->maxProfit123Test();
    testObj->maxPathSum124Test();
    testObj->isPalindrome125Test();
    testObj->findLadders126Test();
    testObj->ladderLength127Test();
    testObj->longestConsecutive128Test();
    testObj->sumNumbers128Test();
    testObj->solve130Test();
    testObj->partition131Test();
    testObj->minCut132Test();
    testObj->cloneGraph133Test();
    testObj->canCompleteCircuit134Test();
    testObj->candy135Test();
    testObj->singleNumber136Test();
    testObj->singleNumber137Test();
    testObj->copyRandomList138Test();
    testObj->wordBreak139Test();
    testObj->wordBreak140Test();
    testObj->hasCycle141Test();
    testObj->detectCycle142Test();
    testObj->reorderList143Test();
    testObj->preorderTraversal144Test();
    testObj->postorderTraversal145Test();
    testObj->LRUCache146Test();
    testObj->insertionSortList147Test();
    testObj->sortList148Test();
    testObj->maxPoints149Test();
    testObj->evalRPN150Test();
    testObj->reverseWords151Test();
    testObj->maxProduct152Test();
    testObj->findMin153Test();
    testObj->findMin154Test();
    testObj->MinStack155Test();
    testObj->read157Test();
    testObj->read158Test();
    testObj->lengthOfLongestSubstringTwoDistinct159Test();
    testObj->getIntersectionNode160Test();
    testObj->isOneEditDistance161Test();
    testObj->findPeakElement162Test();
    testObj->findMissingRanges163Test();
    testObj->maximumGap164Test();
    testObj->compareVersion165Test();
    testObj->fractionToDecimal166Test();
    testObj->twoSum167Test();
    testObj->convertToTitle168Test();
    testObj->majorityElement169Test();
    testObj->TwoSum170Test();
    testObj->titleToNumber171Test();
    testObj->trailingZeroes172Test();
    testObj->BSTIterator173Test();
    testObj->calculateMinimumHP174Test();
    testObj->largestNumber179Test();
    testObj->reverseWords186Test();
    testObj->findRepeatedDnaSequences187Test();
    testObj->maxProfit188Test();
    testObj->rotate189Test();
    testObj->reverseBits190Test();
    testObj->hammingWeight191Test();
    testObj->rob198Test();
    testObj->rightSideView199Test();
    testObj->numIslands200Test();

    return 0;
}