// Leetcode Session 2 Problems main function
#include <iostream>
#include "session2_test.h"
using namespace std;

int main() {
    cout << "Leetcode Session 2 Problem Solution Application starts.\n";
    Session2Test * testObj = new Session2Test();
    cout << "\nTest for problems starts.\n";

    testObj->rangeBitwiseAnd201Test();
    testObj->isHappy202Test();
    testObj->removeElements203Test();
    testObj->countPrimes204Test();
    testObj->isIsomorphic205Test();
    testObj->reverseList206Test();
    testObj->canFinish207Test();
    testObj->Trie208Test();
    testObj->minSubArrayLen209Test();
    testObj->findOrder210Test();
    testObj->WordDictionary211Test();
    testObj->findWords212Test();
    testObj->rob213Test();
    testObj->shortestPalindrome214Test();
    testObj->findKthLargest215Test();
    testObj->combinationSum3_216Test();
    testObj->getSkyline218Test();
    testObj->maximalSquare221Test();
    testObj->countNodes222Test();
    testObj->computeArea223Test();
    testObj->calculate224Test();
    testObj->MyStack225Test();
    testObj->invertTree226Test();
    testObj->calculate227Test();
    testObj->summaryRanges228Test();
    testObj->majorityElement229Test();
    testObj->kthSmallest230Test();
    testObj->isPowerOfTwo231Test();
    testObj->MyQueue232Test();
    testObj->countDigitOne233Test();
    testObj->isPalindrome234Test();
    testObj->lowestCommonAncestor235Test();
    testObj->lowestCommonAncestor236Test();
    testObj->productExceptSelf238Test();
    testObj->maxSlidingWindow239Test();
    testObj->searchMatrix240Test();
    testObj->diffWaysToCompute241Test();
    testObj->isAnagram242Test();
    testObj->shortestDistance243Test();
    testObj->WordDistance244Test();
    testObj->shortestWordDistance245Test();
    testObj->findStrobogrammatic247Test();
    testObj->groupStrings249Test();
    testObj->countUnivalSubtrees250Test();
    testObj->Vector2D251Test();
    testObj->canAttendMeetings252Test();
    testObj->minMeetingRooms253Test();
    testObj->getFactors254Test();
    testObj->verifyPreorder255Test();
    testObj->minCost256Test();
    testObj->binaryTreePaths257Test();
    testObj->threeSumSmaller259Test();
    testObj->singleNumber260Test();
    testObj->validTree261Test();
    testObj->nthUglyNumber264Test();
    testObj->minCostII265Test();
    testObj->canPermutePalindrome266Test();
    testObj->generatePalindromes267Test();
    testObj->missingNumber268Test();
    testObj->alienOrder269Test();
    testObj->encodeDecode271Test();
    testObj->closestKValues272Test();
    testObj->numberToWords273Test();
    testObj->hIndex274Test();
    testObj->findCelebrity277Test();
    testObj->firstBadVersion278Test();
    testObj->numSquares279Test();
    testObj->wiggleSort280Test();
    testObj->addOperators282Test();
    testObj->moveZeroes283Test();
    testObj->PeekingIterator284Test();
    testObj->wallsAndGates286Test();
    testObj->findDuplicate287Test();
    testObj->gameOfLife289Test();
    testObj->wordPatternMatch291Test();
    testObj->MedianFinder295Test();
    testObj->minTotalDistance296Test();
    testObj->Codec297Test();
    testObj->lengthOfLIS300Test();

    return 0;
}